{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Text","Typography","Header","Layout","Content","Footer","Sider","eventsQuery","gql","tagsQuery","Event","event","isEighteenPlus","tags","map","value","name","includes","filter","Grid","hoverable","title","level","ellipsis","alt","src","height","width","style","href","url","gutter","span","icsLink","type","price","parseFloat","Math","round","toFixed","location","website","mapsLink","tag","Events","tagFilter","query","loading","error","data","events","length","eventTag","Filter","selected","callback","sort","t1","t2","localeCompare","Item","checked","onChange","concat","t","App","useState","setTagFilter","useEffect","className","backgroundColor","float","marginTop","theme","Boolean","window","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36f7724a.chunk.js","sourcesContent":["import { Card, Typography, Icon, Tooltip, Row, Col, Tag, Layout, List} from 'antd';\nimport { gql } from 'apollo-boost';\nimport React, { useState, useEffect } from 'react';\nimport { Query } from 'react-apollo';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport Title from 'antd/lib/typography/Title';\nimport CheckableTag from 'antd/lib/tag/CheckableTag';\n\nconst { Text } = Typography;\nconst { Header, Footer, Content, Sider } = Layout;\n\nconst eventsQuery = gql`\n{\n  events {\n    id\n    title\n    location {\n      id\n      name\n      mapsLink\n      website\n    }\n    price\n    icsLink\n    tags {\n      id\n      name\n    }\n    url\n  }\n}\n`;\n\nconst tagsQuery = gql`\n{\n  tags {\n    name\n  }\n}\n`;\n\ninterface ILocation {\n  name: string,\n  mapsLink: string,\n  website: string,\n}\n\ninterface ITag {\n  name: string,\n}\n\ninterface IEvent {\n  title: string,\n  price: number,\n  location: ILocation,\n  icsLink: string,\n  tags: ITag[],\n  url: string\n}\n\nconst Event: React.FC<{event: IEvent}> = ({ event }) => {\n  const isEighteenPlus = event.tags.map((value: ITag) => value.name).includes(\"Ab 18 Jahren\");\n  const tags = event.tags.filter((value: ITag) => ![ \"Ab 18 Jahren\", \"Eintritt frei\" ].includes(value.name));\n\n  return <Card.Grid hoverable={false}>\n    <Row>\n      <Col>\n        <Tooltip title={event.title}>\n          <Title level={4} ellipsis={true}>\n            { isEighteenPlus ?\n              <img alt=\"adults only\" src=\"/eplus.svg\" height={20} width={20} style={ { 'marginBottom': '2.5px', \"marginRight\": \"5px\"} as React.CSSProperties } /> : <b />\n            }\n            <a href={event.url} style={{'color': '#222'}}>{event.title}</a>\n          </Title>\n        </Tooltip>\n      </Col>\n    </Row>\n    <Row gutter={[16, 16]}>\n      <Col span={12}>\n        <Tooltip title=\"Download ICS\">\n          <a href={event.icsLink}>\n            <Icon type=\"calendar\" />\n          </a>\n        </Tooltip>\n      </Col>\n      <Col span={12}>\n        <span>{ event.price ?  '' + parseFloat('' + Math.round(event.price * 100) / 100).toFixed(2) + 'â‚¬' : \"Free\" }</span>\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <a href={event.location.website}>\n          <Icon type=\"compass\" style={{ \"marginRight\": \"5px\" } as React.CSSProperties} />\n        </a>\n        <a href={event.location.mapsLink}>\n          <Text>\n            <Tooltip title={ event.location.name }>{ event.location.name }</Tooltip>\n          </Text>\n        </a>\n      </Col>\n    </Row>\n    <Row>\n      {tags.map((tag: ITag) => <Tag>{ tag.name }</Tag>)}\n    </Row>\n  </Card.Grid>\n}\n\nconst Events: React.FC<{tagFilter: ITag[]}> = ({ tagFilter }) => {\n  return <Query query={eventsQuery}>\n    { ( {loading, error, data} ) => {\n      if (loading) {\n        return <div>Loading</div>\n      } else if (error) {\n        return <div>Error</div>\n      } else {\n        return <Card>\n          {\n            data\n              .events\n              .filter((event: IEvent) =>\n                !tagFilter.length || event.tags.filter((eventTag: ITag) => tagFilter.map((tag: ITag) => tag.name).includes(eventTag.name)).length\n              )\n              .map((event: IEvent) => \n                <Event event={event} />) \n          }\n        </Card>\n      }\n    }}\n  </Query>\n}\n\nconst Filter: React.FC<{tags : ITag[], selected: ITag[], callback: any}> = ({ tags, selected, callback }) => {\n  return <List>\n    {tags\n      .sort((t1, t2) => \n        t1.name.localeCompare(t2.name))\n      .map((tag: ITag) => \n        <List.Item>\n          <CheckableTag\n            style={{\n              'color': selected.includes(tag) ? '#004569' : \"#888\"\n            }}\n            checked={selected.includes(tag)} \n            onChange={(checked) => \n              callback( checked ? \n                selected.concat(tag) : \n                selected.filter((t: ITag) => \n                  t.name !== tag.name))}>\n            { tag.name }\n          </CheckableTag>\n        </List.Item>)}\n  </List>\n}\n\nconst App: React.FC = () => {\n  const [tagFilter, setTagFilter] = useState<ITag[]>([]);\n\n  useEffect(() => {\n    setTagFilter(tagFilter);\n  }, [tagFilter])\n\n  return (\n    <div className=\"App\">\n      <Layout>\n      <Header style={{backgroundColor: '#004569'}}>\n        <a href=\"/\">\n          <img src=\"/partyamt/images/header_logo.png\" width=\"50px\" height=\"50px\" style={{float: 'left', marginTop: '5px'}}></img>\n        </a>\n        <a href=\"/\">\n          <Title style={ { 'color': '#eee', marginTop: '10px' } as React.CSSProperties }>Partyamt</Title>\n        </a>\n      </Header>\n      <Layout>\n        <Sider theme=\"light\">\n        <Query query={tagsQuery}>\n            {({loading, error, data}) => {\n              if (loading || error) {\n                return <div></div>\n              }\n              else {\n                return <Filter tags={data.tags} selected={tagFilter} callback={setTagFilter} />\n              }\n            }}\n          </Query>\n        </Sider>\n        <Content>\n          <Events tagFilter={tagFilter} />\n        </Content>\n      </Layout>\n    </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ApolloClient, { InMemoryCache } from 'apollo-boost';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from \"react-apollo\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n    uri: \"https://partyamt.carstens.tech/graphql\",\n    cache: new InMemoryCache()\n  });\n  \n  \nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}